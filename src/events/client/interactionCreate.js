const { EmbedBuilder } = require('discord.js');

module.exports = {
    name: 'interactionCreate',
    once: false,
    async execute(interaction) {
        if (!interaction.isButton()) return;

        const { customId, message } = interaction;
        const member = interaction.guild.members.cache.get(interaction.user.id);
        const moderatorRole = 'STAFF „Éª Respons√°vel Reportar'; // Substitua pelo nome ou ID do cargo de moderador

        // Verifica se o usu√°rio tem o cargo de moderador
        if (!member.roles.cache.some(role => role.name === moderatorRole)) {
            return interaction.reply({
                content: '‚ùå Voc√™ n√£o tem permiss√£o para interagir com esses bot√µes.',
                ephemeral: true,
            });
        }

        const reportEmbed = message.embeds[0];
        const reportedUserId = reportEmbed.fields[0].value.split('(')[1].split(')')[0]; // Extrai o ID do usu√°rio reportado
        const reporter = await interaction.client.users.fetch(reportEmbed.fields[2].value.split('(')[1].split(')')[0]); // Recupera o usu√°rio que fez o reporte

        // Emojis personalizados para o status
        const acceptedEmoji = '‚úÖ';
        const rejectedEmoji = '‚ùå';

        // Adicionando mais detalhes √† embed
        if (customId === 'accept_report') {
            const updatedEmbed = new EmbedBuilder()
                .setColor('#00FF00')  // Verde para aceito
                .setTitle('üü¢ Reporte Aceito')
                .setDescription(`O reporte de **${reportEmbed.fields[0].value}** foi **aceito** pelos moderadores! ${acceptedEmoji}`)
                .addFields(
                    { name: 'Usu√°rio Reportado:', value: `${reportEmbed.fields[0].value}`, inline: true },
                    { name: 'Motivo:', value: `${reportEmbed.fields[1].value}`, inline: true },
                    { name: 'Status:', value: '‚úÖ Aceito pelos moderadores', inline: false }
                )
                .setTimestamp()
                .setFooter({ text: `Decis√£o tomada por ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
                .setThumbnail('https://example.com/aceito-icon.png');  // Exemplo de imagem de √≠cone

            // Atualiza a embed com a decis√£o de aceita√ß√£o
            await interaction.update({
                embeds: [updatedEmbed],
                components: [],  // Remove os bot√µes ap√≥s a intera√ß√£o
            });

            // Notifica√ß√£o de aceita√ß√£o para os moderadores
            await interaction.followUp({
                content: `üì¢ O reporte de ${reportEmbed.fields[0].value} foi aceito pelos moderadores!`,
                ephemeral: true,
            });

            // Envia uma DM para o usu√°rio que fez o reporte, se poss√≠vel
            try {
                await reporter.send({
                    content: `‚úÖ Seu reporte contra **${reportEmbed.fields[0].value}** foi aceito pelos moderadores!`,
                });
            } catch (error) {
                console.log(`N√£o foi poss√≠vel enviar DM para ${reporter.tag}. DM fechada.`);
                const logChannel = interaction.guild.channels.cache.find(ch => ch.name === '‚õî„Éªreportar');
                if (logChannel) {
                    await logChannel.send({
                        content: `‚ö†Ô∏è N√£o foi poss√≠vel enviar DM para o usu√°rio ${reporter.tag}. A DM foi fechada.`,
                    });
                }
            }

            // Log para os moderadores
            console.log(`Reporte aceito: Usu√°rio reportado - ${reportEmbed.fields[0].value}`);
        } else if (customId === 'reject_report') {
            const updatedEmbed = new EmbedBuilder()
                .setColor('#FF0000')  // Vermelho para rejeitado
                .setTitle('üî¥ Reporte Rejeitado')
                .setDescription(`O reporte de **${reportEmbed.fields[0].value}** foi **rejeitado** pelos moderadores! ${rejectedEmoji}`)
                .addFields(
                    { name: 'Usu√°rio Reportado:', value: `${reportEmbed.fields[0].value}`, inline: true },
                    { name: 'Motivo:', value: `${reportEmbed.fields[1].value}`, inline: true },
                    { name: 'Status:', value: '‚ùå Rejeitado pelos moderadores', inline: false }
                )
                .setTimestamp()
                .setFooter({ text: `Decis√£o tomada por ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
                .setThumbnail('https://example.com/rejeitado-icon.png');  // Exemplo de imagem de √≠cone

            // Atualiza a embed com a decis√£o de rejei√ß√£o
            await interaction.update({
                embeds: [updatedEmbed],
                components: [],  // Remove os bot√µes ap√≥s a intera√ß√£o
            });

            // Notifica√ß√£o de rejei√ß√£o para os moderadores
            await interaction.followUp({
                content: `üö´ O reporte de ${reportEmbed.fields[0].value} foi rejeitado pelos moderadores!`,
                ephemeral: true,
            });

            // Envia uma DM para o usu√°rio que fez o reporte, se poss√≠vel
            try {
                await reporter.send({
                    content: `‚ùå Seu reporte contra **${reportEmbed.fields[0].value}** foi rejeitado pelos moderadores.`,
                });
            } catch (error) {
                console.log(`N√£o foi poss√≠vel enviar DM para ${reporter.tag}. DM fechada.`);
                const logChannel = interaction.guild.channels.cache.find(ch => ch.name === '‚õî„Éªreportar');
                if (logChannel) {
                    await logChannel.send({
                        content: `‚ö†Ô∏è N√£o foi poss√≠vel enviar DM para o usu√°rio ${reporter.tag}. A DM foi fechada.`,
                    });
                }
            }

            // Log para os moderadores
            console.log(`Reporte rejeitado: Usu√°rio reportado - ${reportEmbed.fields[0].value}`);
        }
    },
};
